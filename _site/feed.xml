<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-05-22T07:23:43+01:00</updated><id>http://localhost:4000/</id><title type="html"></title><subtitle></subtitle><author><name>Alastair Rushworth</name><email>alastairmrushworth@gmail.com</email></author><entry><title type="html">Choosing Beta Priors Interactively</title><link href="http://localhost:4000/Choosing-Beta-priors-interactively/" rel="alternate" type="text/html" title="Choosing Beta Priors Interactively" /><published>2017-01-30T00:00:00+00:00</published><updated>2017-01-30T00:00:00+00:00</updated><id>http://localhost:4000/Choosing-Beta-priors-interactively</id><content type="html" xml:base="http://localhost:4000/Choosing-Beta-priors-interactively/">&lt;p&gt;Choosing Beta prior distributions can be difficult when using the default parameterisation because the shape parameters are difficult to interpret. To get around this, I’ve written a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;rshiny&lt;/code&gt; app for teaching purposes, where the user can play with sliders to change the mean and spread of a Beta distribution and visualise the shape at the same time.  Of course, the app translates the mean and spread back to alpha and beta parameters so that once a good prior has been found, it can be implemented in R.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://alastairrushworth.shinyapps.io/beta_prior_picker/&quot;&gt;https://alastairrushworth.shinyapps.io/beta_prior_picker/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;beta_app.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>Alastair Rushworth</name><email>alastairmrushworth@gmail.com</email></author><summary type="html">Choosing Beta prior distributions can be difficult when using the default parameterisation because the shape parameters are difficult to interpret. To get around this, I’ve written a simple rshiny app for teaching purposes, where the user can play with sliders to change the mean and spread of a Beta distribution and visualise the shape at the same time. Of course, the app translates the mean and spread back to alpha and beta parameters so that once a good prior has been found, it can be implemented in R.</summary></entry><entry><title type="html">Interactive Rshiny App For Variogram Parameters</title><link href="http://localhost:4000/Interactive-rshiny-app-for-variogram-parameters/" rel="alternate" type="text/html" title="Interactive Rshiny App For Variogram Parameters" /><published>2017-01-17T00:00:00+00:00</published><updated>2017-01-17T00:00:00+00:00</updated><id>http://localhost:4000/Interactive-rshiny-app-for-variogram-parameters</id><content type="html" xml:base="http://localhost:4000/Interactive-rshiny-app-for-variogram-parameters/">&lt;p&gt;I’ve put together a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;rshiny&lt;/code&gt; app &lt;a href=&quot;https://alastairrushworth.shinyapps.io/variogram/&quot;&gt;https://alastairrushworth.shinyapps.io/variogram/&lt;/a&gt; for visualising the effects of the nugget, range and sill parameters on a spatial process simulated under the exponential model.     I’m hoping that these types of things will be useful as teaching tools.  I have still to figure out how to add a colour legend to the image without using layout – this seems to interfere with par’s mfrow.  R shiny is great – there are lots of nice shiny examples here &lt;a href=&quot;www.showmeshiny.com&quot;&gt;www.showmeshiny.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;vario.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>Alastair Rushworth</name><email>alastairmrushworth@gmail.com</email></author><summary type="html">I’ve put together a simple rshiny app https://alastairrushworth.shinyapps.io/variogram/ for visualising the effects of the nugget, range and sill parameters on a spatial process simulated under the exponential model. I’m hoping that these types of things will be useful as teaching tools. I have still to figure out how to add a colour legend to the image without using layout – this seems to interfere with par’s mfrow. R shiny is great – there are lots of nice shiny examples here www.showmeshiny.com.</summary></entry><entry><title type="html">Easily Download Stock Price Data With Quantmod</title><link href="http://localhost:4000/Easily-Download-Stock-price-Data-with-quantmod/" rel="alternate" type="text/html" title="Easily Download Stock Price Data With Quantmod" /><published>2016-12-20T00:00:00+00:00</published><updated>2016-12-20T00:00:00+00:00</updated><id>http://localhost:4000/Easily-Download-Stock-price-Data-with-quantmod</id><content type="html" xml:base="http://localhost:4000/Easily-Download-Stock-price-Data-with-quantmod/">&lt;p&gt;I recently needed to obtain some stock price data for student projects, and found that the R package &lt;a href=&quot;https://cran.r-project.org/web/packages/quantmod/index.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;quantmod&lt;/code&gt;&lt;/a&gt; does this really nicely and easily.  The following R code downloads daily opening, closing, high, low, and trading volumes for various stocks (a mixture of randomly and non-randomly chosen ones, but you can change these if you know the stock symbol).  The default source for the data is yahoo finance, but that can be changed within the &lt;code class=&quot;highlighter-rouge&quot;&gt;getSymbols&lt;/code&gt; function.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;library(quantmod)
# download financial data
getSymbols(&quot;ASX&quot;)  # advanced semiconductor engineering
getSymbols(&quot;AAPL&quot;) # apple
getSymbols(&quot;AMZN&quot;) # amazon
getSymbols(&quot;AZN&quot;)  # astrazeneca
getSymbols(&quot;BP&quot;)   # british petroleum
getSymbols(&quot;C&quot;)    # citigroup
getSymbols(&quot;CDE&quot;)  # couer mining
getSymbols(&quot;DAL&quot;)  # delta airlines
getSymbols(&quot;DPZ&quot;)  # domino's pizza
getSymbols(&quot;EQY&quot;)  # equity one
getSymbols(&quot;F&quot;)    # ford
getSymbols(&quot;GIL&quot;)  # gidlan activewear
getSymbols(&quot;GOOGL&quot;)# google
getSymbols(&quot;HOT&quot;)  # starwood hotesl and resorts worldwide
getSymbols(&quot;JPM&quot;)  # JP Morgan
getSymbols(&quot;K&quot;)    # kellogs
getSymbols(&quot;KO&quot;)   # coca-cola
getSymbols(&quot;M&quot;)    # Macy's Inc
getSymbols(&quot;MSFT&quot;) # microsoft
getSymbols(&quot;NOK&quot;)  # nokia
getSymbols(&quot;PG&quot;)   # procter-gamble
getSymbols(&quot;RBS&quot;)  # royal bank of scotland
getSymbols(&quot;SAM&quot;)  # boston beer company
getSymbols(&quot;SPGI&quot;) # S&amp;amp;P Global inc
getSymbols(&quot;T&quot;)    # AT&amp;amp;T
getSymbols(&quot;TEF&quot;)  # Telefonica
getSymbols(&quot;UA&quot;)   # under armour
getSymbols(&quot;V&quot;)    # visa inc
getSymbols(&quot;WMT&quot;)  # walmart
getSymbols(&quot;WHR&quot;)  # whirlpool inc
getSymbols(&quot;XIN&quot;)  # xinyuan real estate co ltd

all_stocks &amp;lt;- list(ASX, AAPL, AMZN, AZN, BP, C, CDE, DAL, DPZ, EQY, F, GIL, GOOGL, HOT, JPM, K, KO, M, MSFT, NOK, PG, RBS, SAM, SPGI, T, TEF, UA, V, WMT, WHR, XIN)

all_stocks &amp;lt;- lapply(all_stocks, Cl)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This final line creates a list all_stocks that contains only the closing prices (and dates) for each stock.  Finally, to ensure the stock data all have the same start and end dates, we can truncate each time series at a common starting point:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xtc &amp;lt;- function(XTS.obj, start_date = &quot;2010-01-04&quot;){
   dts &amp;lt;- index(XTS.obj)
   strt &amp;lt;- which(dts == start_date)
   if(length(strt) == 0){
     out &amp;lt;- 0
     } else {
     out &amp;lt;- XTS.obj[-c(1:(strt - 1))]
   }
 out
}
stocks_trunc &amp;lt;- lapply(all_stocks, xtc)
stock_data   &amp;lt;- as.matrix(Reduce(&quot;cbind&quot;, stocks_trunc))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;When a stock doesn’t go back as far your start date (make sure this is a valid trading day), this is indicated by &lt;code class=&quot;highlighter-rouge&quot;&gt;xtc&lt;/code&gt; returning 0 rather than a vector of prices.  And that’s it….  &lt;code class=&quot;highlighter-rouge&quot;&gt;stock_data&lt;/code&gt; is a matrix containing dates, and closing prices with each of the requested stocks, ready to go for analysis!&lt;/p&gt;</content><author><name>Alastair Rushworth</name><email>alastairmrushworth@gmail.com</email></author><summary type="html">I recently needed to obtain some stock price data for student projects, and found that the R package quantmod does this really nicely and easily. The following R code downloads daily opening, closing, high, low, and trading volumes for various stocks (a mixture of randomly and non-randomly chosen ones, but you can change these if you know the stock symbol). The default source for the data is yahoo finance, but that can be changed within the getSymbols function.</summary></entry><entry><title type="html">Adding Png Images And Legends To Plots</title><link href="http://localhost:4000/Adding-png-images-and-legends-to-plots/" rel="alternate" type="text/html" title="Adding Png Images And Legends To Plots" /><published>2015-07-08T00:00:00+01:00</published><updated>2015-07-08T00:00:00+01:00</updated><id>http://localhost:4000/Adding-png-images-and-legends-to-plots</id><content type="html" xml:base="http://localhost:4000/Adding-png-images-and-legends-to-plots/">&lt;p&gt;It can be a pain to add legend to plots, so here is one possible workaround that may help.  All credit for this idea goes to Michael Scroggie, whose code (which I found in the github repo &lt;a href=&quot;https://gist.github.com/scrogster/7fc5b7597b63585a00b6&quot;&gt;https://gist.github.com/scrogster/7fc5b7597b63585a00b6&lt;/a&gt; has inspired this.   Basically, create a legend and save it as a png (&lt;code class=&quot;highlighter-rouge&quot;&gt;my_legend.png&lt;/code&gt; in the example below), then import the png from inside R, and add to the current plotting window.&lt;/p&gt;

&lt;p&gt;Example legend code:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Make a legend, and save it somewhere as &quot;my_legend.png&quot;
par(fig=c(0,1,0,1), oma = c(0,0,0,5), mar = c(0,0,2,5), bg = NA)
plot(c(0,0), type = &quot;n&quot;, bg = NA, bty = &quot;n&quot;)
n.cols  &amp;lt;- 300
ngrid   &amp;lt;- n.cols
brks    &amp;lt;- c(0.01, 150)
xvec    &amp;lt;- rep(0, n.cols)
brks    &amp;lt;- c(seq(brks[1], brks[2], length = ngrid + 1))
palette &amp;lt;- colorRampPalette(c(&quot;blue&quot;,&quot;green&quot;,&quot;red&quot;))
cols    &amp;lt;- palette(n.cols)
par(fig=c(0,1,0,1), oma = c(1,0,0,5), mar = c(0,0,2,5), bg = NA)
plot(brks/500, brks, type = &quot;n&quot;, xaxs = &quot;i&quot;, yaxs = &quot;i&quot;,
    yaxt = &quot;n&quot;, xlab = &quot;&quot;, ylab = &quot;&quot;, main = &quot;&quot;, bty = &quot;n&quot;,
    xaxt = &quot;n&quot;, xlim = c(-1, 1), bg = NA)
tick.subset  &amp;lt;- seq(1, n.cols, length.out = 8)
axis(4, at = brks[tick.subset], las=1,
         labels = round(c(brks[tick.subset]), 0), 
         ylog = F, lwd = 2, cex.axis = 1.5)
rect(0, 0.01, 0.5, 150, border = 1, lwd = 6)
rect(xvec, brks[-length(brks)], xvec + 0.5, 
    brks[-1], col = cols, border = NA)
mtext(side = 4, &quot;Enlightening legend text&quot;, line = -1.5, cex = 1.5)
my_legend
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;png_1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Note that &lt;code class=&quot;highlighter-rouge&quot;&gt;par(bg = NA)&lt;/code&gt; is used throughout, so that the legend has a transparent background, which is useful if we add to a plot that has details in the background we’d prefer not to obscure too much.&lt;/p&gt;

&lt;p&gt;Now the legend is simply imported and stuck on a new plot window using Michael’s code (which I’ve only modified slightly):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;library(png) 
library(RCurl) 
legend_png &amp;lt;- readPNG(&quot;my_legend.png&quot;) 

# utility function for embedding png images at specified fractional 
# sizes in R plots places the logo centred on a specified fraction 
# of the the usr space, and sizes appropriately 
# (respects aspect ratio) 
logoing_func&amp;lt;-function(logo, x, y, size){ 
   dims &amp;lt;- dim(logo)[1:2]  
   AR   &amp;lt;- dims[1]/dims[2] 
   par(usr=c(0, 1, 0, 1)) 
   rasterImage(logo, x-(size/2), y-(AR*size/2), 
       x+(size/2), y+(AR*size/2), interpolate=TRUE) 
} 
# create a minimal new plot 
plot(0, type = &quot;n&quot;) 
# add the legend png 
logoing_func(legend_png, x = 0.2, y = 0.5, size = 0.5)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;png_2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>Alastair Rushworth</name><email>alastairmrushworth@gmail.com</email></author><summary type="html">It can be a pain to add legend to plots, so here is one possible workaround that may help. All credit for this idea goes to Michael Scroggie, whose code (which I found in the github repo https://gist.github.com/scrogster/7fc5b7597b63585a00b6 has inspired this. Basically, create a legend and save it as a png (my_legend.png in the example below), then import the png from inside R, and add to the current plotting window.</summary></entry><entry><title type="html">Accessing Data In Cached Knitr Chunks</title><link href="http://localhost:4000/Accessing-data-in-cached-knitr-chunks/" rel="alternate" type="text/html" title="Accessing Data In Cached Knitr Chunks" /><published>2014-04-14T00:00:00+01:00</published><updated>2014-04-14T00:00:00+01:00</updated><id>http://localhost:4000/Accessing-data-in-cached-knitr-chunks</id><content type="html" xml:base="http://localhost:4000/Accessing-data-in-cached-knitr-chunks/">&lt;p&gt;Sometimes you’ve run your &lt;code class=&quot;highlighter-rouge&quot;&gt;knitr&lt;/code&gt; document, and you’d just like to examine some of the cached data.  It’s not obvious how to do that, and this probably isn’t really what &lt;code class=&quot;highlighter-rouge&quot;&gt;knitr&lt;/code&gt; was intended for but it can be done by using the &lt;code class=&quot;highlighter-rouge&quot;&gt;lazyLoad()&lt;/code&gt; function.  If you look in the &lt;code class=&quot;highlighter-rouge&quot;&gt;knitr&lt;/code&gt; ‘cache’ directory there should be a load of &lt;code class=&quot;highlighter-rouge&quot;&gt;.rdb&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;.rdx&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;.RData&lt;/code&gt; files that store all of the cached computation. A call along the lines of&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;lazyLoad(&quot;name-of-my-cached-rdx-file&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;does the trick.  Note the lack of a file extension.&lt;/p&gt;</content><author><name>Alastair Rushworth</name><email>alastairmrushworth@gmail.com</email></author><summary type="html">Sometimes you’ve run your knitr document, and you’d just like to examine some of the cached data. It’s not obvious how to do that, and this probably isn’t really what knitr was intended for but it can be done by using the lazyLoad() function. If you look in the knitr ‘cache’ directory there should be a load of .rdb, .rdx and .RData files that store all of the cached computation. A call along the lines of</summary></entry><entry><title type="html">Sparse B Spline Basis Matrix In R</title><link href="http://localhost:4000/Sparse-b-spline-basis-matrix-in-R/" rel="alternate" type="text/html" title="Sparse B Spline Basis Matrix In R" /><published>2013-12-13T00:00:00+00:00</published><updated>2013-12-13T00:00:00+00:00</updated><id>http://localhost:4000/Sparse-b-spline-basis-matrix-in-R</id><content type="html" xml:base="http://localhost:4000/Sparse-b-spline-basis-matrix-in-R/">&lt;p&gt;This is slightly old news now, but as of R 2.15.1, the functions spline.des and splineDesign which construct design matrices for sets of b-spline basis functions, now have the option of outputing such design matrices in sparse format, and constructing them more efficiently. The results are in the compressed column oriented format (class &lt;code class=&quot;highlighter-rouge&quot;&gt;dgCMatrix)&lt;/code&gt; used by the &lt;code class=&quot;highlighter-rouge&quot;&gt;Matrix&lt;/code&gt; package.  This is natural, since b-splines are non-zero over only a small interval and in many applications are used in large numbers, requiring the construction of large model matrices.&lt;/p&gt;

&lt;p&gt;You’ll need to fire up the &lt;code class=&quot;highlighter-rouge&quot;&gt;splines&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Matrix&lt;/code&gt; packages first.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;library(splines)
library(Matrix)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then generate lots of data, say 100000 standard normal draws, and then use this simulated data to construct dense and sparse matrices.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;x&amp;lt;-rnorm(100000)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Bdense&amp;lt;-spline.des(x, knots = seq(min(x),  max(x), length.out = 100), outer.ok = T)$design
Bsparse&amp;lt;-spline.des(x, knots = seq(min(x),  max(x), length.out = 100), outer.ok = T, sparse = T)$design
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;There is a speed up in constructing the above,&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;system.time(spline.des(x, knots = seq(min(x),  max(x), length.out = 100), outer.ok = T))
system.time(spline.des(x, knots = seq(min(x),  max(x), length.out = 100), outer.ok = T, sparse = T))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;But the main thing is how much faster things are from here on with &lt;code class=&quot;highlighter-rouge&quot;&gt;Bsparse&lt;/code&gt;.  Suppose we wish to calculate&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;t(Bdense) %*% Bdense
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Well this is faster either way using &lt;code class=&quot;highlighter-rouge&quot;&gt;crossprod&lt;/code&gt;, and blazingly fast for the sparse version:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;system.time(t(Bdense) %*% Bdense)
system.time(crossprod(Bdense))
system.time(crossprod(Bsparse))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So far so good.  The dense output takes up 73.2Mb compared to only 4.6Mb in the sparse version in this admittedly contrived example (such examples definitely can and do arise, particularly varying coefficient models where many basis functions are needed to describe a parameter’s smooth trajectory as another variable changes, such as with time for example).&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;object.size(Bdense)/1024^2
object.size(Bsparse)/1024^2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Something that I’ve found handy is the ability to swap between different sparse matrix formats in R.  For example, if I’d like to manipulate &lt;code class=&quot;highlighter-rouge&quot;&gt;Bsparse&lt;/code&gt; using the &lt;code class=&quot;highlighter-rouge&quot;&gt;spam&lt;/code&gt; package, which has some very useful tools for working with Gaussian Markov random fields, the summary function can be used on &lt;code class=&quot;highlighter-rouge&quot;&gt;Matrix&lt;/code&gt; objects to extract the triplet form, which can then easily be used to construct a spam object:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;library(spam)
trip.Matrix&amp;lt;-summary(Bsparse)
Bsparse.spam&amp;lt;-spam(list(i = trip.Matrix[,1], j = trip.Matrix[,2], trip.Matrix[,3]),nrow = nrow(Bsparse), ncol = ncol(Bsparse))
class(Bsparse.spam)
all.equal(as.matrix(Bsparse.spam), as.matrix(Bsparse), check.attributes = F)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name>Alastair Rushworth</name><email>alastairmrushworth@gmail.com</email></author><summary type="html">This is slightly old news now, but as of R 2.15.1, the functions spline.des and splineDesign which construct design matrices for sets of b-spline basis functions, now have the option of outputing such design matrices in sparse format, and constructing them more efficiently. The results are in the compressed column oriented format (class dgCMatrix) used by the Matrix package. This is natural, since b-splines are non-zero over only a small interval and in many applications are used in large numbers, requiring the construction of large model matrices.</summary></entry><entry><title type="html">Simple Knitr Tutorial</title><link href="http://localhost:4000/Simple-knitr-tutorial/" rel="alternate" type="text/html" title="Simple Knitr Tutorial" /><published>2013-09-13T00:00:00+01:00</published><updated>2013-09-13T00:00:00+01:00</updated><id>http://localhost:4000/Simple-knitr-tutorial</id><content type="html" xml:base="http://localhost:4000/Simple-knitr-tutorial/">&lt;h3 id=&quot;what-is-knitr&quot;&gt;What is knitr?&lt;/h3&gt;

&lt;p&gt;Knitr &lt;a href=&quot;http://yihui.name/knitr/&quot;&gt;http://yihui.name/knitr/&lt;/a&gt; is an &lt;code class=&quot;highlighter-rouge&quot;&gt;R&lt;/code&gt; package that allows straightforward integration of R code for writing reports and is developed by Yihui Xie. It is very powerful, much easier to get started with than Sweave and has potentially a lot of uses. My interest in lies in how easy it is to save the results of an analysis and use them in different documents types with little extra effort – for example including the same plots and tables in papers and in talk slides. Better yet, it all works in RStudio without the need for calling any additional commands to produce the PDFs (assuming you can already compile .tex documents in RStudio).&lt;/p&gt;

&lt;p&gt;This mini tutorial is very basic and makes use of RStudio, and highlights a selection the main features in knitr, but hopefully illustrates how easy they are to use. Yihui’s website and resources therein are great for info on all of the full capabilities of knitr, the manual is here &lt;a href=&quot;http://yihui.name/knitr/demo/manual/&quot;&gt;http://yihui.name/knitr/demo/manual/&lt;/a&gt;. The LateX code below can be download from here: testKnitr.Rnw. To compile this using RStudio’s “Compile PDF” button, you might have to first set “RStudio -&amp;gt; Tools -&amp;gt; Options -&amp;gt; Sweave -&amp;gt; weave Rnw files using” to “knitr”. Also make sure you have the R package &lt;code class=&quot;highlighter-rouge&quot;&gt;knitr&lt;/code&gt; installed too!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;\documentclass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;article&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;\begin{document}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;\section*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\textbf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;0 to knitr in 60 seconds&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;\noindent&lt;/span&gt; All code in &lt;span class=&quot;k&quot;&gt;\texttt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;knitr&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; is run in grouped 'chunks' of
code that perform specific parts of the analysis. Typically an
analysis might start with loading packages, and so the following
chunk does that.

&amp;lt;&amp;lt;loadPackages&amp;gt;&amp;gt;=
library(xtable)
@

&lt;span class=&quot;k&quot;&gt;\noindent&lt;/span&gt; Inside the &lt;span class=&quot;nb&quot;&gt;\verb&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;&amp;lt;&amp;lt;...&amp;gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;+&lt;/span&gt;, options can be set that
control how and what is to be displayed within the chunk. In this
case, the only thing provided is the chunk name that has been set
to &lt;span class=&quot;k&quot;&gt;\texttt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;loadPackages&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;', although chunk names are not strictly
required.&lt;span class=&quot;k&quot;&gt;\\&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;\noindent&lt;/span&gt; Next, some data is generated and a linear model is
fitted. The chunk will be called &lt;span class=&quot;k&quot;&gt;\texttt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;doLinearModel&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;.

&amp;lt;&amp;lt;doLinearModel, cache = TRUE&amp;gt;&amp;gt;=
x&amp;lt;-rnorm(100)
y&amp;lt;-3*x + 0.5 + rnorm(100)
lm1&amp;lt;-lm(y~x)
@

&lt;span class=&quot;k&quot;&gt;\noindent&lt;/span&gt; The &lt;span class=&quot;k&quot;&gt;\texttt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;cache = TRUE&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; option tell knitr that you want
 to store the results of the R code inside the chunk. This will
result in a new directory called 'cache' being created inside the
current working directory where all of the chunk data will be put.
 When the document is subsequently compiled again, the cached R
data will be used provided that neither the chunk contents or
options have not changed since the last compile. If any changes
have been made, the cache will be rebuilt. &lt;span class=&quot;k&quot;&gt;\textbf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;Important note&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;:
 &lt;span class=&quot;k&quot;&gt;\textit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;any&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; small change to a chunk (including insertion of space
s) will result in cache rebuilds, so it is important to avoid
making accidental changes to time consuming chunks. We can evaluate
 R objects and perform simple operations in the text body, for exam
ple the largest values of &lt;span class=&quot;k&quot;&gt;\texttt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;x&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; using &lt;span class=&quot;k&quot;&gt;\Sexpr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;max(x)&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;.&lt;span class=&quot;k&quot;&gt;\\&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;\noindent&lt;/span&gt; Plotting in &lt;span class=&quot;k&quot;&gt;\texttt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;knitr&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; is straightforward:

&amp;lt;&amp;lt;plotLinearModel, dependson ='doLinearModel', cache = TRUE&amp;gt;&amp;gt;=
plot(y~x)
abline(lm1)
@

&lt;span class=&quot;k&quot;&gt;\noindent&lt;/span&gt; This chunk will print a plot. Note the addition of the
option dependson = 'doLinearModel' - this option indicates that
some of the objects in plotLinearModel were created or modified
by the doLinearModel chunk. If changes are made to doLinearModel,
then the the plotLinearModel cache will be rebuilt too - this way,
each time code changes are made, the changes propagate through
subsequent pieces of code that depend on the modifications. The
plotting command have been placed in a seperate chunk from the
linear model fitting so that changes can be made to the plotting
code without affecting the cache that contains &lt;span class=&quot;k&quot;&gt;\texttt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;x&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; and
&lt;span class=&quot;k&quot;&gt;\texttt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;y&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; (this very important if the code in doLinearModel
takes a while to execute). The cached plots are saved into a
separate cache directory called 'figure'.&lt;span class=&quot;k&quot;&gt;\\&lt;/span&gt;

&amp;lt;&amp;lt;tableCoefficients, dependson ='doLinearModel', echo = FALSE, results = 'asis', cache = TRUE&amp;gt;&amp;gt;=
print(xtable(summary(lm1)&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;coefficients, align &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt; 'l|cccc', digits &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;
@

&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;\noindent&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt; This final chunk will produce a table. Because printing
an &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;\texttt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;xtable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt; object results in a bit of latex code, we need
to supply the option results &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt; 'asis' to tell knitr to treat the
output as such. Note in this chunk we have suppressed the printing
of the code by using the echo &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt; FALSE argument.

&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;\end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name>Alastair Rushworth</name><email>alastairmrushworth@gmail.com</email></author><summary type="html">What is knitr?</summary></entry><entry><title type="html">Useful Rcpp Links And Resources</title><link href="http://localhost:4000/Useful-Rcpp-Links-and-Resources/" rel="alternate" type="text/html" title="Useful Rcpp Links And Resources" /><published>2013-03-13T00:00:00+00:00</published><updated>2013-03-13T00:00:00+00:00</updated><id>http://localhost:4000/Useful-Rcpp-Links-and-Resources</id><content type="html" xml:base="http://localhost:4000/Useful-Rcpp-Links-and-Resources/">&lt;p&gt;Recently I’ve working with &lt;code class=&quot;highlighter-rouge&quot;&gt;Rcpp&lt;/code&gt; in order to make MCMC run more quickly, and it is fantastic. As a native R programmer, much of the effort has been in getting up to speed with writing in C++, but this is really eased by the features of Rcpp. There is already plenty of documentation available, primarily on Dirk Eddelbuettel’s website
&lt;a href=&quot;http://dirk.eddelbuettel.com/code.html&quot;&gt;http://dirk.eddelbuettel.com/code.html&lt;/a&gt; and on the R package CRAN page &lt;a href=&quot;http://cran.r-project.org/web/packages/Rcpp/index.html&quot;&gt;http://cran.r-project.org/web/packages/Rcpp/index.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But I thought I’d highlight some resources that got me quickly using &lt;code class=&quot;highlighter-rouge&quot;&gt;C++&lt;/code&gt; in R via &lt;code class=&quot;highlighter-rouge&quot;&gt;Rcpp&lt;/code&gt; from a standing start:&lt;/p&gt;

&lt;p&gt;Very accessible (from an R programmers perpective) tutorial by Hadley Wickham
&lt;a href=&quot;http://adv-r.had.co.nz/Rcpp.html&quot;&gt;http://adv-r.had.co.nz/Rcpp.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Google Tech talk by Dirk Eddelbuettel
&lt;a href=&quot;http://www.youtube.com/watch?v=UZkaZhsOfT4&quot;&gt;http://www.youtube.com/watch?v=UZkaZhsOfT4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Really helpful practical examples
&lt;a href=&quot;http://gallery.rcpp.org&quot;&gt;http://gallery.rcpp.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Places to get help
&lt;a href=&quot;http://stackoverflow.com/questions/tagged/rcpp&quot;&gt;http://stackoverflow.com/questions/tagged/rcpp&lt;/a&gt; and
&lt;a href=&quot;http://lists.r-forge.r-project.org/mailman/listinfo/rcpp-devel&quot;&gt;http://lists.r-forge.r-project.org/mailman/listinfo/rcpp-devel&lt;/a&gt; (or just search the archives &lt;a href=&quot;http://www.mail-archive.com/rcpp-devel@lists.r-forge.r-project.org/&quot;&gt;http://www.mail-archive.com/rcpp-devel@lists.r-forge.r-project.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Rcpp&lt;/code&gt; documentation
&lt;a href=&quot;http://cran.r-project.org/web/packages/Rcpp/vignettes/Rcpp-introduction.pdf&quot;&gt;http://cran.r-project.org/web/packages/Rcpp/vignettes/Rcpp-introduction.pdf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Rcpp&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;RcppArmadillo&lt;/code&gt; (has a nice Kalman filter example)
&lt;a href=&quot;http://dirk.eddelbuettel.com/papers/RcppArmadillo-intro.pdf&quot;&gt;http://dirk.eddelbuettel.com/papers/RcppArmadillo-intro.pdf&lt;/a&gt;&lt;/p&gt;</content><author><name>Alastair Rushworth</name><email>alastairmrushworth@gmail.com</email></author><summary type="html">Recently I’ve working with Rcpp in order to make MCMC run more quickly, and it is fantastic. As a native R programmer, much of the effort has been in getting up to speed with writing in C++, but this is really eased by the features of Rcpp. There is already plenty of documentation available, primarily on Dirk Eddelbuettel’s website http://dirk.eddelbuettel.com/code.html and on the R package CRAN page http://cran.r-project.org/web/packages/Rcpp/index.html</summary></entry></feed>